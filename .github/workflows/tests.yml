name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,tests
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,tests

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy --ignore-missing-imports --no-strict-optional chat_cli_openai.py app_openai.py example_usage.py || true

    - name: Run unit tests
      run: |
        pytest tests/ -m "not integration and not performance" -v --cov --cov-report=xml --cov-report=term

    - name: Run integration tests (if credentials available)
      if: env.OPENAI_API_KEY != '' || env.DATABRICKS_TOKEN != ''
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        pytest tests/ -m integration -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Generate test report
      if: always()
      run: |
        pytest tests/ --html=report.html --self-contained-html || true

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report-${{ matrix.os }}-py${{ matrix.python-version }}
        path: report.html

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Generate coverage report
      run: |
        coverage run -m pytest tests/
        coverage report
        coverage html

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=80

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r . -x /tests,/venv -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json